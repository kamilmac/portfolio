import * as THREE from 'three'
import React from 'react'
import { Canvas, extend, useFrame } from '@react-three/fiber'
// import { LayerMaterial, Depth, Fresnel, Noise, DebugLayerMaterial } from 'lamina'

import { Sphere, Text, shaderMaterial, OrthographicCamera, PerspectiveCamera, OrbitControls } from '@react-three/drei'
import useSpline from '@splinetool/r3f-spline'
import { Bloom, DepthOfField, EffectComposer, Noise } from '@react-three/postprocessing'

import { useGLTF } from '@react-three/drei'
import { Depth, Fresnel, LayerMaterial } from 'lamina'

// https://github.com/pmndrs/react-postprocessing/blob/master/api.md


// https://github.com/pmndrs/react-postprocessing

export default function App({ ...props }) {
  return (
    <Canvas
      gl={{ toneMapping: THREE.ACESFilmicToneMapping }}
      style={{
        height: '100vh',
      }}
      onCreated={state => {
        state.gl.toneMapping =  THREE.ACESFilmicToneMapping;
        console.log({state})
      }}
      shadows
      flat
      linear
    >
      <color attach="background" args={['hotpink']} />
      {/* <ambientLight intensity={0.2} /> */}
      <OrbitControls />
      <group {...props} dispose={null}>
        <Model />
        <OrthographicCamera
          name="Personal Camera"
          makeDefault={true}
          position={[-1,2,3]}
          rotation={[-2.52,- 1.38, 2.53]}
          zoom={300}
        />
      </group>
    </Canvas>
  )
}


/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

function Model(props) {
  const { nodes, materials } = useGLTF('/11-tubes.glb')
  const ref = React.useRef();
  useFrame(({ clock }) => {
    ref.current.rotation.y = clock.elapsedTime * 4;
  })
  return (
    <group {...props} dispose={null}>
      <mesh
        ref={ref}
        geometry={nodes.InsidePath.geometry}
        receiveShadow castShadow
      >
        <Mat1 />
      </mesh>
      <mesh geometry={nodes.OutsidePath.geometry} receiveShadow castShadow>
        <Mat2 />
      </mesh>
    </group>
  )
}

useGLTF.preload('/11-tubes.glb')

const Mat1 = () => {
  return (
    // <meshPhongMaterial color="#33BBFF"  />
    <meshStandardMaterial attach="material" color={"#6be092"} emissive={'#eee'} side={THREE.DoubleSide}/>
  );
}

const Mat2 = () => {
  return (
    // <meshPhongMaterial color="#33BBFF"  />
    <meshPhysicalMaterial attach="material" color={"white"} side={THREE.DoubleSide}
      roughness={0.4}
      transmission={2}
      thickness={1.5}
      flatShading={false}
    />
  );
}