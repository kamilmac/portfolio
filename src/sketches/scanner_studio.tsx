/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'

import React, { useRef } from 'react'
import { useGLTF, useTexture } from '@react-three/drei'
import { useControls } from 'leva'


export function Model({ ...props }) {
  const group = useRef()

  const { nodes, materials } = useGLTF('/scanner-studio-export-glb.glb')
  const bakedBase = useTexture("/scanner-base-material-sub.jpg")
  const bakedPlate = useTexture("/scanner-plate-material-sub.jpg")
  const bakedScene = useTexture("/scene-material-sub.jpg")
  
  bakedBase.flipY = false;
  bakedPlate.flipY = false;
  bakedScene.flipY = false;
  return (
    <group ref={group} {...props} dispose={null}>
      <mesh
        geometry={nodes.Scene_1.geometry}
        // material={mat}
        material-map={bakedScene}
        scale={10.43}
      />
      <mesh
        geometry={nodes.Scanner_base.geometry}
        // material={materials['Scanner base']}
        // material={new THREE.MeshBasicMaterial( { color: 0xffff00 } )}
        material-map={bakedBase}
        position={[4.36, 0.05, 0]}
        rotation={[0, Math.PI / 2, 0]} />
      <mesh
        geometry={nodes.Scanner_plate.geometry}
        // material={mat}
        material-map={bakedPlate}
        position={[4.36, 0.13, 0]}
        rotation={[0, Math.PI / 2, 0]}
      />
      <group>
        <Dots
          center={[4.62, 0.151, 0]}
          dist={0.68}
          dotSize={0.06}
        />  
      </group>
    </group>
  )
}

useGLTF.preload('/scanner-studio-export-glb.glb')


const Dots = (props) => {
  const { dotsColor } = useControls({ dotsColor: '#fff' })
  const dist = props.dist;
  const distSmall = props.dist*0.8;
  const dots = [
    [
      0,
      dist,
    ],
    [
      dist,
      0,
    ],
    [
      -dist,
      0,
    ],
    [
      0,
      -dist,
    ],
  ]
  const dotsSmall = [
    [
      distSmall,
      distSmall,
    ],
    [
      distSmall,
      -distSmall,
    ],
    [
      -distSmall,
      distSmall,
    ],
    [
      -distSmall,
      -distSmall,
    ],
  ]
  return (
    <>
      <group>
        {
          dots.map(d =>
            <mesh
              geometry={new THREE.CircleGeometry( props.dotSize, 62 )}
              material={new THREE.MeshBasicMaterial( { color: dotsColor } )}
              position={[props.center[0] + d[0], props.center[1], props.center[2] + d[1]]}
              rotation={[-Math.PI / 2, 0, 0]}
            />
          )
        }
      </group>
      <group>
        {
          dotsSmall.map(d =>
            <mesh
              geometry={new THREE.CircleGeometry( props.dotSize*0.7, 62 )}
              material={new THREE.MeshBasicMaterial( { color: dotsColor } )}
              position={[props.center[0] + d[0], props.center[1], props.center[2] + d[1]]}
              rotation={[-Math.PI / 2, 0, 0]}
            />
          )
        }
      </group>
    </>
  )
}