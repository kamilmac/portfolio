/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from 'react'

// export function Model({ ...props }) {
//   const group = useRef()
//   const snap = useSnapshot(state)
//   const { nodes, materials } = useGLTF('/shoe-draco.glb')
//   console.log('HERE', nodes)
//   return (
//     <group ref={group} {...props} dispose={null}>
//       <mesh geometry={nodes.Plane.geometry} material={nodes.Plane.material} position={[0, 0, 0]} />
//       <mesh geometry={nodes.Suzanne.geometry} material={nodes.Suzanne.material} position={[0, 1, 0]} scale={[0.5, 0.5, 0.5]} />
//     </group>
//   )
// }

import { useFrame } from "@react-three/fiber"
import { useGLTF } from "@react-three/drei"

// Using a Valtio state model to bridge reactivity between
// the canvas and the dom, both can write to it and/or react to it.
const state = {
  current: null,
  items: {
    laces: "#ccc",
    mesh: "#ccc",
    caps: "#ccc",
    inner: "#ccc",
    sole: "#ccc",
    stripes: "#ccc",
    band: "#ccc",
    patch: "#ccc",
  },
}

export function Model({ ...props }) {
  const ref = React.useRef()
  const { nodes, materials } = useGLTF("shoe-draco.glb")

  // Animate model
  // useFrame((state) => {
  //   const t = state.clock.getElapsedTime()
  //   ref.current.rotation.z = -0.2 - (1 + Math.sin(t / 1.5)) / 20
  //   ref.current.rotation.x = Math.cos(t / 4) / 8
  //   ref.current.rotation.y = Math.sin(t / 4) / 8
  //   ref.current.position.y = (1 + Math.sin(t / 1.5)) / 10
  // })

  return (
    <group
      castShadow
      ref={ref}
      dispose={null}
      position={[554.83, -181.41, 262.62]}
      rotation={[0, Math.PI, 0]}
      scale={[70,70,70]}
    >
      <group>
        <mesh receiveShadow castShadow geometry={nodes.shoe.geometry} material={materials.laces} material-color={state.items.laces} />
        <mesh receiveShadow castShadow geometry={nodes.shoe_1.geometry} material={materials.mesh} material-color={state.items.mesh} />
        <mesh receiveShadow castShadow geometry={nodes.shoe_2.geometry} material={materials.caps} material-color={state.items.caps} />
        <mesh receiveShadow castShadow geometry={nodes.shoe_3.geometry} material={materials.inner} material-color={state.items.inner} />
        <mesh receiveShadow castShadow geometry={nodes.shoe_4.geometry} material={materials.sole} material-color={state.items.sole} />
        <mesh receiveShadow castShadow geometry={nodes.shoe_5.geometry} material={materials.stripes} material-color={state.items.stripes} />
        <mesh receiveShadow castShadow geometry={nodes.shoe_6.geometry} material={materials.band} material-color={state.items.band} />
        <mesh receiveShadow castShadow geometry={nodes.shoe_7.geometry} material={materials.patch} material-color={state.items.patch} />
      </group>
      <group
        position={[0,0,-1]}
        rotation={[0, Math.PI*0.1, 0]}
        scale={[1,1,-1]}
      >
        <mesh receiveShadow castShadow geometry={nodes.shoe.geometry} material={materials.laces} material-color={state.items.laces} />
        <mesh receiveShadow castShadow geometry={nodes.shoe_1.geometry} material={materials.mesh} material-color={state.items.mesh} />
        <mesh receiveShadow castShadow geometry={nodes.shoe_2.geometry} material={materials.caps} material-color={state.items.caps} />
        <mesh receiveShadow castShadow geometry={nodes.shoe_3.geometry} material={materials.inner} material-color={state.items.inner} />
        <mesh receiveShadow castShadow geometry={nodes.shoe_4.geometry} material={materials.sole} material-color={state.items.sole} />
        <mesh receiveShadow castShadow geometry={nodes.shoe_5.geometry} material={materials.stripes} material-color={state.items.stripes} />
        <mesh receiveShadow castShadow geometry={nodes.shoe_6.geometry} material={materials.band} material-color={state.items.band} />
        <mesh receiveShadow castShadow geometry={nodes.shoe_7.geometry} material={materials.patch} material-color={state.items.patch} />
      </group>
    </group>
  )
}

useGLTF.preload('/shoe-draco.glb')
