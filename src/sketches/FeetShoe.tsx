/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import * as THREE from 'three'

import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { LayerMaterial, Depth, Fresnel, Gradient, Noise } from 'lamina'
import { useFrame } from "@react-three/fiber"

export function Model(props) {
  const { nodes, materials } = useGLTF('/feetShoe2.glb')
  const ref = React.useRef();
  const ref2 = React.useRef();

// Animate uniforms using a ref.
  useFrame(({ clock }) => {
    ref.current.intensity = Math.sin(clock.elapsedTime*4)/ 2 + 1;
    ref2.current.scale = (Math.sin(clock.elapsedTime)+ 8) * 8;
  })
  console.log(nodes)
  return (
    <group {...props} dispose={null}>
      <mesh geometry={nodes.left.geometry} position={[0.05,-0.02,0]}>
        <LayerMaterial lighting="basic">
          <Depth
            near={0.4854}
            far={0.7661999999999932}
            origin={[-0.4920000000000004, 0.4250000000000003, 0]}
            colorA={'#3ff233'}
            colorB={'#0079f9'}
          />
          <Fresnel
            ref={ref}
            color={'red'}
            mode={'screen'} 
          />
          <Noise
            ref={ref2}
            colorA={'#4d4433'}
            colorB={'#a8a8a8'}
            colorC={'#fefefe'}
            colorD={'#fefefe'}
            alpha={0.14}
            // scale={1000}
            offset={[0, 0, 0]}
            name={'noise'}
            mode={'multiply'}
            type={'cell'}
          />
        </LayerMaterial>
      </mesh>
      <Divider />
      <group position={[0.04, 0.04, -0.15]} rotation={[Math.PI, Math.PI / 2, 0]} scale={[-0.17, -0.17, -0.18]}>
        <mesh geometry={nodes.shoe_1.geometry}>
          <ShoeMaterial />
        </mesh>
        <mesh geometry={nodes.shoe_2.geometry}>
          <ShoeMaterial />
        </mesh>
        <mesh geometry={nodes.shoe_3.geometry}>
          <ShoeMaterial />
        </mesh>
        <mesh geometry={nodes.shoe_4.geometry}>
          <ShoeMaterial />
        </mesh>
        <mesh geometry={nodes.shoe_5.geometry}>
          <ShoeMaterial />
        </mesh>
        <mesh geometry={nodes.shoe_6.geometry}>
          <ShoeMaterial />
        </mesh>
        <mesh geometry={nodes.shoe_7.geometry}>
          <ShoeMaterial />
        </mesh>
        <mesh geometry={nodes.shoe_8.geometry}>
          <ShoeMaterial />
        </mesh>
      </group>
    </group>
  )
}

useGLTF.preload('/feetShoe.gltf')


const ShoeMaterial = () => {
  return (
    <LayerMaterial lighting="basic">
      <Depth
        near={0.4854}
        far={0.7661999999999932}
        origin={[-0.4920000000000004, 0.4250000000000003, 0]}
        colorA={'#3ff233'}
        colorB={'#0079f9'}
      />
      <Fresnel
        color={'red'}
        mode={'screen'} 
      />
      <Noise
        colorA={'#4d4433'}
        colorB={'#a8a8a8'}
        colorC={'#fefefe'}
        colorD={'#fefefe'}
        alpha={0.14}
        // scale={1000}
        offset={[0, 0, 0]}
        name={'noise'}
        mode={'multiply'}
        type={'cell'}
      />
    </LayerMaterial>
  );
}

const Divider = () => {
  return (
    <mesh
      scale={1}
      rotation={[0,Math.PI * 0.5,0]}
      position={[0.05,0.03,-0.07]}
    >
      <boxGeometry args={[0.02, 0.3, 0.3]} />
    </mesh>
  );
}